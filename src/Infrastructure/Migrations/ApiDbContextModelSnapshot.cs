// <auto-generated />
using System;
using Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    partial class ApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Addresses.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<string>("Complement")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("complement");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("neighborhood");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("number");

                    b.Property<Guid?>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("source_id");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("state");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("street");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("zip_code");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("address", "public");
                });

            modelBuilder.Entity("Domain.Entities.Faqs.Faq", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("answer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Link")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("link");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("question");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("source_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("faq", "public");
                });

            modelBuilder.Entity("Domain.Entities.Faqs.FaqPage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CustomUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("custom_url");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("source_id");

                    b.Property<int>("SourceType")
                        .HasColumnType("integer")
                        .HasColumnName("source_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("WelcomeMessage")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("welcome_message");

                    b.HasKey("Id");

                    b.HasIndex("CustomUrl")
                        .IsUnique();

                    b.ToTable("faq_page", "public");
                });

            modelBuilder.Entity("Domain.Entities.HealthCares.HealthCare", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AnsNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("ans_number");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uuid")
                        .HasColumnName("office_id");

                    b.Property<string>("Registry")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("registry");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("healthcare", "public");
                });

            modelBuilder.Entity("Domain.Entities.HealthcareProfessionals.Profession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("professions", "public");
                });

            modelBuilder.Entity("Domain.Entities.HealthcareProfessionals.Speciality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("ProfessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("profession_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionId");

                    b.ToTable("specialties", "public");
                });

            modelBuilder.Entity("Domain.Entities.HealthcareProfessionals.SubSpecialty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("SpecialtyId")
                        .HasColumnType("uuid")
                        .HasColumnName("specialty_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("sub_specialties", "public");
                });

            modelBuilder.Entity("Domain.Entities.IaChats.IaChat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("HashSourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("hash_source");

                    b.Property<int?>("HashSourceType")
                        .HasColumnType("integer")
                        .HasColumnName("hash_source_type");

                    b.Property<Guid?>("SourceId")
                        .HasColumnType("uuid")
                        .HasColumnName("source_id");

                    b.HasKey("Id");

                    b.ToTable("ia_chat", "public");
                });

            modelBuilder.Entity("Domain.Entities.IaChats.IaChatRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("ExperienceType")
                        .HasColumnType("integer")
                        .HasColumnName("experience");

                    b.Property<int>("GeneralRating")
                        .HasColumnType("integer")
                        .HasColumnName("general");

                    b.Property<int>("ProblemSolvedType")
                        .HasColumnType("integer")
                        .HasColumnName("problem_solved");

                    b.Property<int>("Utility")
                        .HasColumnType("integer")
                        .HasColumnName("utility");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.ToTable("rating_chat", "public");
                });

            modelBuilder.Entity("Domain.Entities.IaChats.IaMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("IaChatId")
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.HasKey("Id");

                    b.HasIndex("IaChatId");

                    b.ToTable("ia_message", "public");
                });

            modelBuilder.Entity("Domain.Entities.Identities.Manager", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("CorporateName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("corporate_name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("manager", "public");
                });

            modelBuilder.Entity("Domain.Entities.Identities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("role", "public");
                });

            modelBuilder.Entity("Domain.Entities.Identities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("user", "public");
                });

            modelBuilder.Entity("Domain.Entities.Identities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("identity_user_role", "public");
                });

            modelBuilder.Entity("Domain.Entities.OfficeAttendances.OfficeAttendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<int>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uuid")
                        .HasColumnName("office_id");

                    b.Property<Guid>("ServiceTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("service_type_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("office_attendance", "public");
                });

            modelBuilder.Entity("Domain.Entities.Offices.Office", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Individual")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("individual");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("office", "public");
                });

            modelBuilder.Entity("Domain.Entities.Offices.OfficeAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsTeleconsultation")
                        .HasColumnType("boolean")
                        .HasColumnName("is_teleconsultation");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uuid")
                        .HasColumnName("office_id");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("AddressId", "OfficeId")
                        .IsUnique();

                    b.ToTable("office_address", "public");
                });

            modelBuilder.Entity("Domain.Entities.Offices.OfficeSpecialty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uuid")
                        .HasColumnName("office_id");

                    b.Property<Guid>("SpecialtyId")
                        .HasColumnType("uuid")
                        .HasColumnName("specialty_id");

                    b.HasKey("Id");

                    b.HasIndex("SpecialtyId");

                    b.HasIndex("OfficeId", "SpecialtyId")
                        .IsUnique();

                    b.ToTable("office_specialty", "public");
                });

            modelBuilder.Entity("Domain.Entities.Offices.OfficesProfessional", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uuid")
                        .HasColumnName("office_id");

                    b.Property<Guid>("ProfessionalId")
                        .HasColumnType("uuid")
                        .HasColumnName("professional_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ProfessionalId");

                    b.ToTable("offices_professional", "public");
                });

            modelBuilder.Entity("Domain.Entities.Patients.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("GoogleRefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("google_refresh_token");

                    b.Property<string>("GoogleToken")
                        .HasColumnType("text")
                        .HasColumnName("google_token");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("text")
                        .HasColumnName("picture_url");

                    b.Property<bool>("PreRegister")
                        .HasColumnType("boolean")
                        .HasColumnName("pre_register");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("removed_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("patient", "public");
                });

            modelBuilder.Entity("Domain.Entities.Patients.PatientLead", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean")
                        .HasColumnName("approved");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("removed_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("patient_lead", "public");
                });

            modelBuilder.Entity("Domain.Entities.Professionals.Professional", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<bool>("IsRegistered")
                        .HasColumnType("boolean")
                        .HasColumnName("is_registered");

                    b.Property<Guid>("ManagerId")
                        .HasColumnType("uuid")
                        .HasColumnName("manager_id");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("PreferredName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("preferred_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.ToTable("professional", "public");
                });

            modelBuilder.Entity("Domain.Entities.Professionals.ProfessionalAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uuid")
                        .HasColumnName("address_id");

                    b.Property<Guid>("ProfessionalId")
                        .HasColumnType("uuid")
                        .HasColumnName("professional_id");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ProfessionalId");

                    b.ToTable("professional_address", "public");
                });

            modelBuilder.Entity("Domain.Entities.Professionals.ProfessionalDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BackUrl")
                        .HasColumnType("text")
                        .HasColumnName("back_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("document_number");

                    b.Property<string>("DocumentState")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("document_state");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("document_type");

                    b.Property<string>("FrontUrl")
                        .HasColumnType("text")
                        .HasColumnName("front_url");

                    b.Property<Guid>("ProfessionalId")
                        .HasColumnType("uuid")
                        .HasColumnName("professional_id");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("removed_at");

                    b.Property<bool>("Validated")
                        .HasColumnType("boolean")
                        .HasColumnName("validated");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionalId");

                    b.ToTable("professional_documents", "public");
                });

            modelBuilder.Entity("Domain.Entities.Professionals.ProfessionalSpecialtyDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("ProfessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("profession_id");

                    b.Property<Guid>("ProfessionalId")
                        .HasColumnType("uuid")
                        .HasColumnName("professional_id");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("removed_at");

                    b.Property<Guid>("SpecialityId")
                        .HasColumnType("uuid")
                        .HasColumnName("speciality_id");

                    b.Property<Guid?>("SubSpecialityId")
                        .HasColumnType("uuid")
                        .HasColumnName("subspeciality_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("VideoPresentation")
                        .HasColumnType("text")
                        .HasColumnName("video_presentation");

                    b.HasKey("Id");

                    b.HasIndex("ProfessionId");

                    b.HasIndex("ProfessionalId");

                    b.HasIndex("SpecialityId");

                    b.HasIndex("SubSpecialityId");

                    b.ToTable("professional_specialty_details", "public");
                });

            modelBuilder.Entity("Domain.Entities.ServiceTypes.ServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("service_type", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("identity_role_claim", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("identity_user_claim", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("identity_user_login", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("identity_user_token", "public");
                });

            modelBuilder.Entity("Domain.Entities.Addresses.Address", b =>
                {
                    b.HasOne("Domain.Entities.Identities.User", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.OwnsOne("Domain.Entities.Identities.UserType", "SourceType", b1 =>
                        {
                            b1.Property<Guid>("AddressId")
                                .HasColumnType("uuid");

                            b1.Property<int>("UserTypeId")
                                .HasMaxLength(50)
                                .HasColumnType("integer")
                                .HasColumnName("source_type")
                                .HasAnnotation("Relational:JsonPropertyName", "userTypeId");

                            b1.HasKey("AddressId");

                            b1.ToTable("address", "public");

                            b1.WithOwner()
                                .HasForeignKey("AddressId");
                        });

                    b.Navigation("Source");

                    b.Navigation("SourceType");
                });

            modelBuilder.Entity("Domain.Entities.Faqs.Faq", b =>
                {
                    b.OwnsOne("Domain.Entities.Faqs.FaqCategoryType", "FaqCategory", b1 =>
                        {
                            b1.Property<Guid>("FaqId")
                                .HasColumnType("uuid");

                            b1.Property<int>("CategoryType")
                                .HasColumnType("integer")
                                .HasColumnName("faq_category");

                            b1.HasKey("FaqId");

                            b1.ToTable("faq", "public");

                            b1.WithOwner()
                                .HasForeignKey("FaqId");
                        });

                    b.OwnsOne("Domain.Entities.Faqs.FaqSourceType", "SourceType", b1 =>
                        {
                            b1.Property<Guid>("FaqId")
                                .HasColumnType("uuid");

                            b1.Property<int>("SourceType")
                                .HasColumnType("integer")
                                .HasColumnName("source_type");

                            b1.HasKey("FaqId");

                            b1.ToTable("faq", "public");

                            b1.WithOwner()
                                .HasForeignKey("FaqId");
                        });

                    b.Navigation("FaqCategory")
                        .IsRequired();

                    b.Navigation("SourceType")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.HealthCares.HealthCare", b =>
                {
                    b.HasOne("Domain.Entities.Offices.Office", "Office")
                        .WithMany("HealthCares")
                        .HasForeignKey("OfficeId")
                        .IsRequired();

                    b.Navigation("Office");
                });

            modelBuilder.Entity("Domain.Entities.HealthcareProfessionals.Speciality", b =>
                {
                    b.HasOne("Domain.Entities.HealthcareProfessionals.Profession", "Profession")
                        .WithMany("Specialties")
                        .HasForeignKey("ProfessionId")
                        .IsRequired();

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("Domain.Entities.HealthcareProfessionals.SubSpecialty", b =>
                {
                    b.HasOne("Domain.Entities.HealthcareProfessionals.Speciality", "Speciality")
                        .WithMany("SubSpecialties")
                        .HasForeignKey("SpecialtyId")
                        .IsRequired();

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("Domain.Entities.IaChats.IaChat", b =>
                {
                    b.OwnsOne("Domain.Entities.IaChats.IaChatSourceType", "SourceType", b1 =>
                        {
                            b1.Property<Guid>("IaChatId")
                                .HasColumnType("uuid");

                            b1.Property<int>("SourceType")
                                .HasColumnType("integer")
                                .HasColumnName("source_type");

                            b1.HasKey("IaChatId");

                            b1.ToTable("ia_chat", "public");

                            b1.WithOwner()
                                .HasForeignKey("IaChatId");
                        });

                    b.Navigation("SourceType")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.IaChats.IaChatRating", b =>
                {
                    b.HasOne("Domain.Entities.IaChats.IaChat", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("Domain.Entities.IaChats.IaMessage", b =>
                {
                    b.HasOne("Domain.Entities.IaChats.IaChat", "IaChat")
                        .WithMany("Messages")
                        .HasForeignKey("IaChatId")
                        .IsRequired();

                    b.OwnsOne("Domain.Entities.IaChats.IaMessageSenderType", "SenderType", b1 =>
                        {
                            b1.Property<Guid>("IaMessageId")
                                .HasColumnType("uuid");

                            b1.Property<int>("SenderType")
                                .HasColumnType("integer")
                                .HasColumnName("sender_type");

                            b1.HasKey("IaMessageId");

                            b1.ToTable("ia_message", "public");

                            b1.WithOwner()
                                .HasForeignKey("IaMessageId");
                        });

                    b.Navigation("IaChat");

                    b.Navigation("SenderType")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Identities.Manager", b =>
                {
                    b.HasOne("Domain.Entities.Identities.User", "User")
                        .WithOne("Manager")
                        .HasForeignKey("Domain.Entities.Identities.Manager", "UserId")
                        .IsRequired();

                    b.OwnsOne("Domain.Entities.Identities.ManagerType", "ManagerType", b1 =>
                        {
                            b1.Property<Guid>("ManagerId")
                                .HasColumnType("uuid");

                            b1.Property<int>("TypeId")
                                .HasColumnType("integer")
                                .HasColumnName("type");

                            b1.HasKey("ManagerId");

                            b1.ToTable("manager", "public");

                            b1.WithOwner()
                                .HasForeignKey("ManagerId");
                        });

                    b.Navigation("ManagerType")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Identities.User", b =>
                {
                    b.OwnsOne("Domain.Entities.ValueObjects.Document", "Cnpj", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(14)
                                .HasColumnType("character varying(14)")
                                .HasDefaultValue("")
                                .HasColumnName("cnpj");

                            b1.HasKey("UserId");

                            b1.ToTable("user", "public");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Domain.Entities.ValueObjects.Document", "Cpf", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("character varying(11)")
                                .HasColumnName("cpf");

                            b1.HasKey("UserId");

                            b1.ToTable("user", "public");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Domain.Entities.Identities.UserType", "UserType", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<int>("UserTypeId")
                                .HasColumnType("integer")
                                .HasColumnName("type")
                                .HasAnnotation("Relational:JsonPropertyName", "userTypeId");

                            b1.HasKey("UserId");

                            b1.ToTable("user", "public");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Cnpj")
                        .IsRequired();

                    b.Navigation("Cpf")
                        .IsRequired();

                    b.Navigation("UserType")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Identities.UserRole", b =>
                {
                    b.HasOne("Domain.Entities.Identities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired();

                    b.HasOne("Domain.Entities.Identities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.OfficeAttendances.OfficeAttendance", b =>
                {
                    b.HasOne("Domain.Entities.Offices.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .IsRequired();

                    b.HasOne("Domain.Entities.ServiceTypes.ServiceType", "ServiceType")
                        .WithMany()
                        .HasForeignKey("ServiceTypeId")
                        .IsRequired();

                    b.OwnsOne("Domain.Entities.ValueObjects.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("OfficeAttendanceId")
                                .HasColumnType("uuid");

                            b1.Property<long>("ValueAsCents")
                                .HasColumnType("bigint")
                                .HasColumnName("price");

                            b1.HasKey("OfficeAttendanceId");

                            b1.ToTable("office_attendance", "public");

                            b1.WithOwner()
                                .HasForeignKey("OfficeAttendanceId");
                        });

                    b.Navigation("Office");

                    b.Navigation("Price")
                        .IsRequired();

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("Domain.Entities.Offices.Office", b =>
                {
                    b.HasOne("Domain.Entities.Identities.Manager", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .IsRequired();

                    b.OwnsOne("Domain.Entities.ValueObjects.Document", "Cnpj", b1 =>
                        {
                            b1.Property<Guid>("OfficeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(14)
                                .HasColumnType("character varying(14)")
                                .HasDefaultValue("")
                                .HasColumnName("cnpj");

                            b1.HasKey("OfficeId");

                            b1.ToTable("office", "public");

                            b1.WithOwner()
                                .HasForeignKey("OfficeId");
                        });

                    b.OwnsOne("Domain.Entities.ValueObjects.Url", "Instagram", b1 =>
                        {
                            b1.Property<Guid>("OfficeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasDefaultValue("")
                                .HasColumnName("instagram");

                            b1.HasKey("OfficeId");

                            b1.ToTable("office", "public");

                            b1.WithOwner()
                                .HasForeignKey("OfficeId");
                        });

                    b.OwnsOne("Domain.Entities.ValueObjects.PhoneNumber", "Phone", b1 =>
                        {
                            b1.Property<Guid>("OfficeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)")
                                .HasDefaultValue("")
                                .HasColumnName("phone");

                            b1.HasKey("OfficeId");

                            b1.ToTable("office", "public");

                            b1.WithOwner()
                                .HasForeignKey("OfficeId");
                        });

                    b.OwnsOne("Domain.Entities.ValueObjects.Url", "Site", b1 =>
                        {
                            b1.Property<Guid>("OfficeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasDefaultValue("")
                                .HasColumnName("site");

                            b1.HasKey("OfficeId");

                            b1.ToTable("office", "public");

                            b1.WithOwner()
                                .HasForeignKey("OfficeId");
                        });

                    b.OwnsOne("Domain.Entities.ValueObjects.PhoneNumber", "Whatsapp", b1 =>
                        {
                            b1.Property<Guid>("OfficeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)")
                                .HasDefaultValue("")
                                .HasColumnName("whatsapp");

                            b1.HasKey("OfficeId");

                            b1.ToTable("office", "public");

                            b1.WithOwner()
                                .HasForeignKey("OfficeId");
                        });

                    b.OwnsOne("Domain.Entities.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("OfficeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasDefaultValue("")
                                .HasColumnName("email");

                            b1.HasKey("OfficeId");

                            b1.ToTable("office", "public");

                            b1.WithOwner()
                                .HasForeignKey("OfficeId");
                        });

                    b.OwnsOne("Domain.Entities.ValueObjects.FileS3", "Logo", b1 =>
                        {
                            b1.Property<Guid>("OfficeId")
                                .HasColumnType("uuid");

                            b1.Property<Guid?>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("logo_id");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasDefaultValue("")
                                .HasColumnName("logo");

                            b1.HasKey("OfficeId");

                            b1.ToTable("office", "public");

                            b1.WithOwner()
                                .HasForeignKey("OfficeId");
                        });

                    b.Navigation("Cnpj")
                        .IsRequired();

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Instagram")
                        .IsRequired();

                    b.Navigation("Logo")
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Phone")
                        .IsRequired();

                    b.Navigation("Site")
                        .IsRequired();

                    b.Navigation("Whatsapp")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Offices.OfficeAddress", b =>
                {
                    b.HasOne("Domain.Entities.Addresses.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Domain.Entities.Offices.Office", "Office")
                        .WithMany("Addresses")
                        .HasForeignKey("OfficeId")
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("Domain.Entities.Offices.OfficeSpecialty", b =>
                {
                    b.HasOne("Domain.Entities.Offices.Office", "Office")
                        .WithMany("Specialties")
                        .HasForeignKey("OfficeId")
                        .IsRequired();

                    b.HasOne("Domain.Entities.HealthcareProfessionals.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialtyId")
                        .IsRequired();

                    b.Navigation("Office");

                    b.Navigation("Speciality");
                });

            modelBuilder.Entity("Domain.Entities.Offices.OfficesProfessional", b =>
                {
                    b.HasOne("Domain.Entities.Offices.Office", "Office")
                        .WithMany("Professionals")
                        .HasForeignKey("OfficeId")
                        .IsRequired();

                    b.HasOne("Domain.Entities.Professionals.Professional", "Professional")
                        .WithMany()
                        .HasForeignKey("ProfessionalId")
                        .IsRequired();

                    b.Navigation("Office");

                    b.Navigation("Professional");
                });

            modelBuilder.Entity("Domain.Entities.Patients.Patient", b =>
                {
                    b.HasOne("Domain.Entities.Identities.User", "User")
                        .WithOne()
                        .HasForeignKey("Domain.Entities.Patients.Patient", "UserId")
                        .IsRequired();

                    b.OwnsOne("Domain.Entities.Patients.BiologicalSex", "BiologicalSex", b1 =>
                        {
                            b1.Property<Guid>("PatientId")
                                .HasColumnType("uuid");

                            b1.Property<int>("TypeId")
                                .HasColumnType("integer")
                                .HasColumnName("biological_sex");

                            b1.HasKey("PatientId");

                            b1.ToTable("patient", "public");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.OwnsOne("Domain.Entities.Patients.BloodType", "BloodType", b1 =>
                        {
                            b1.Property<Guid>("PatientId")
                                .HasColumnType("uuid");

                            b1.Property<int>("TypeId")
                                .HasColumnType("integer")
                                .HasColumnName("blood_type");

                            b1.HasKey("PatientId");

                            b1.ToTable("patient", "public");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.OwnsOne("Domain.Entities.Patients.Gender", "Gender", b1 =>
                        {
                            b1.Property<Guid>("PatientId")
                                .HasColumnType("uuid");

                            b1.Property<int>("TypeId")
                                .HasColumnType("integer")
                                .HasColumnName("gender");

                            b1.HasKey("PatientId");

                            b1.ToTable("patient", "public");

                            b1.WithOwner()
                                .HasForeignKey("PatientId");
                        });

                    b.Navigation("BiologicalSex");

                    b.Navigation("BloodType");

                    b.Navigation("Gender");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Patients.PatientLead", b =>
                {
                    b.OwnsOne("Domain.Entities.ValueObjects.Document", "Cpf", b1 =>
                        {
                            b1.Property<Guid>("PatientLeadId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(11)
                                .HasColumnType("character varying(11)")
                                .HasColumnName("cpf");

                            b1.HasKey("PatientLeadId");

                            b1.ToTable("patient_lead", "public");

                            b1.WithOwner()
                                .HasForeignKey("PatientLeadId");
                        });

                    b.Navigation("Cpf")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Professionals.Professional", b =>
                {
                    b.HasOne("Domain.Entities.Identities.Manager", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId")
                        .IsRequired();

                    b.OwnsOne("Domain.Entities.ValueObjects.Url", "Biography", b1 =>
                        {
                            b1.Property<Guid>("ProfessionalId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("biography");

                            b1.HasKey("ProfessionalId");

                            b1.ToTable("professional", "public");

                            b1.WithOwner()
                                .HasForeignKey("ProfessionalId");
                        });

                    b.OwnsOne("Domain.Entities.ValueObjects.Document", "Cnpj", b1 =>
                        {
                            b1.Property<Guid>("ProfessionalId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("character varying(14)")
                                .HasColumnName("cnpj");

                            b1.HasKey("ProfessionalId");

                            b1.ToTable("professional", "public");

                            b1.WithOwner()
                                .HasForeignKey("ProfessionalId");
                        });

                    b.OwnsOne("Domain.Entities.ValueObjects.Document", "Cpf", b1 =>
                        {
                            b1.Property<Guid>("ProfessionalId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(14)
                                .HasColumnType("character varying(14)")
                                .HasColumnName("cpf");

                            b1.HasKey("ProfessionalId");

                            b1.ToTable("professional", "public");

                            b1.WithOwner()
                                .HasForeignKey("ProfessionalId");
                        });

                    b.OwnsOne("Domain.Entities.ValueObjects.Url", "Instagram", b1 =>
                        {
                            b1.Property<Guid>("ProfessionalId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("instagram");

                            b1.HasKey("ProfessionalId");

                            b1.ToTable("professional", "public");

                            b1.WithOwner()
                                .HasForeignKey("ProfessionalId");
                        });

                    b.OwnsOne("Domain.Entities.ValueObjects.Url", "Website", b1 =>
                        {
                            b1.Property<Guid>("ProfessionalId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("website");

                            b1.HasKey("ProfessionalId");

                            b1.ToTable("professional", "public");

                            b1.WithOwner()
                                .HasForeignKey("ProfessionalId");
                        });

                    b.OwnsOne("Domain.Entities.Professionals.ProfessionalRegisterStatus", "RegisterStatus", b1 =>
                        {
                            b1.Property<Guid>("ProfessionalId")
                                .HasColumnType("uuid");

                            b1.Property<int>("StatusType")
                                .HasMaxLength(50)
                                .HasColumnType("integer")
                                .HasColumnName("status");

                            b1.HasKey("ProfessionalId");

                            b1.ToTable("professional", "public");

                            b1.WithOwner()
                                .HasForeignKey("ProfessionalId");
                        });

                    b.Navigation("Biography");

                    b.Navigation("Cnpj");

                    b.Navigation("Cpf")
                        .IsRequired();

                    b.Navigation("Instagram");

                    b.Navigation("Manager");

                    b.Navigation("RegisterStatus")
                        .IsRequired();

                    b.Navigation("Website");
                });

            modelBuilder.Entity("Domain.Entities.Professionals.ProfessionalAddress", b =>
                {
                    b.HasOne("Domain.Entities.Addresses.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .IsRequired();

                    b.HasOne("Domain.Entities.Professionals.Professional", "Professional")
                        .WithMany("Addresses")
                        .HasForeignKey("ProfessionalId")
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Professional");
                });

            modelBuilder.Entity("Domain.Entities.Professionals.ProfessionalDocument", b =>
                {
                    b.HasOne("Domain.Entities.Professionals.Professional", "Professional")
                        .WithMany("Documents")
                        .HasForeignKey("ProfessionalId")
                        .IsRequired();

                    b.Navigation("Professional");
                });

            modelBuilder.Entity("Domain.Entities.Professionals.ProfessionalSpecialtyDetail", b =>
                {
                    b.HasOne("Domain.Entities.HealthcareProfessionals.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId")
                        .IsRequired();

                    b.HasOne("Domain.Entities.Professionals.Professional", "Professional")
                        .WithMany("SpecialtyDetails")
                        .HasForeignKey("ProfessionalId")
                        .IsRequired();

                    b.HasOne("Domain.Entities.HealthcareProfessionals.Speciality", "Speciality")
                        .WithMany()
                        .HasForeignKey("SpecialityId")
                        .IsRequired();

                    b.HasOne("Domain.Entities.HealthcareProfessionals.SubSpecialty", "SubSpeciality")
                        .WithMany()
                        .HasForeignKey("SubSpecialityId");

                    b.Navigation("Profession");

                    b.Navigation("Professional");

                    b.Navigation("Speciality");

                    b.Navigation("SubSpeciality");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.Identities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.Identities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.Identities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Domain.Entities.Identities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.HealthcareProfessionals.Profession", b =>
                {
                    b.Navigation("Specialties");
                });

            modelBuilder.Entity("Domain.Entities.HealthcareProfessionals.Speciality", b =>
                {
                    b.Navigation("SubSpecialties");
                });

            modelBuilder.Entity("Domain.Entities.IaChats.IaChat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Domain.Entities.Identities.User", b =>
                {
                    b.Navigation("Manager");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Entities.Offices.Office", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("HealthCares");

                    b.Navigation("Professionals");

                    b.Navigation("Specialties");
                });

            modelBuilder.Entity("Domain.Entities.Professionals.Professional", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Documents");

                    b.Navigation("SpecialtyDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
