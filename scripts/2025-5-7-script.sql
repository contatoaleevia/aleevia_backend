CREATE TABLE IF NOT EXISTS "__EFMigrationsHistory" (
    "MigrationId" character varying(150) NOT NULL,
    "ProductVersion" character varying(32) NOT NULL,
    CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY ("MigrationId")
);

START TRANSACTION;

CREATE TABLE public.professions (
    "Id" uuid NOT NULL,
    name character varying(100) NOT NULL,
    active boolean NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone,
    CONSTRAINT "PK_professions" PRIMARY KEY ("Id")
);

CREATE TABLE public.role (
    id uuid NOT NULL,
    name character varying(100) NOT NULL,
    normalized_name character varying(100) NOT NULL,
    concurrency_stamp character varying(100) NOT NULL,
    CONSTRAINT "PK_role" PRIMARY KEY (id)
);

CREATE TABLE public.service_type (
    id uuid NOT NULL,
    name character varying(100) NOT NULL,
    description character varying(500),
    active boolean NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone,
    CONSTRAINT "PK_service_type" PRIMARY KEY (id)
);

CREATE TABLE public."user" (
    id uuid NOT NULL,
    name character varying(50) NOT NULL,
    cpf character varying(11) NOT NULL,
    cnpj character varying(14) NOT NULL DEFAULT '',
    type integer NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone,
    deleted_at timestamp with time zone,
    active boolean NOT NULL,
    user_name character varying(100),
    normalized_user_name character varying(256),
    email character varying(100) NOT NULL,
    normalized_email character varying(256),
    email_confirmed boolean NOT NULL,
    password_hash text,
    security_stamp text,
    concurrency_stamp text,
    phone_number character varying(20) NOT NULL,
    phone_number_confirmed boolean NOT NULL,
    two_factor_enabled boolean NOT NULL,
    lockout_end timestamp with time zone,
    lockout_enabled boolean NOT NULL,
    access_failed_count integer NOT NULL,
    CONSTRAINT "PK_user" PRIMARY KEY (id)
);

CREATE TABLE public.specialties (
    "Id" uuid NOT NULL,
    name character varying(100) NOT NULL,
    active boolean NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone,
    profession_id uuid NOT NULL,
    CONSTRAINT "PK_specialties" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_specialties_professions_profession_id" FOREIGN KEY (profession_id) REFERENCES public.professions ("Id")
);

CREATE TABLE public.identity_role_claim (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "RoleId" uuid NOT NULL,
    "ClaimType" text,
    "ClaimValue" text,
    CONSTRAINT "PK_identity_role_claim" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_identity_role_claim_role_RoleId" FOREIGN KEY ("RoleId") REFERENCES public.role (id)
);

CREATE TABLE public.addresses (
    id uuid NOT NULL,
    "SourceId" uuid,
    source_type integer,
    name character varying(100),
    street character varying(200) NOT NULL,
    neighborhood character varying(100) NOT NULL,
    number character varying(10) NOT NULL,
    city character varying(100) NOT NULL,
    state character varying(50) NOT NULL,
    zip_code character varying(10) NOT NULL,
    complement character varying(100),
    type character varying(50),
    location character varying(50) NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone,
    CONSTRAINT "PK_addresses" PRIMARY KEY (id),
    CONSTRAINT "FK_addresses_user_SourceId" FOREIGN KEY ("SourceId") REFERENCES public."user" (id)
);

CREATE TABLE public.faq (
    id uuid NOT NULL,
    "SourceId" uuid NOT NULL,
    source_type integer NOT NULL,
    question character varying(200) NOT NULL,
    answer character varying(1000) NOT NULL,
    faq_category integer NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone,
    deleted_at timestamp with time zone,
    CONSTRAINT "PK_faq" PRIMARY KEY (id),
    CONSTRAINT "FK_faq_user_SourceId" FOREIGN KEY ("SourceId") REFERENCES public."user" (id)
);

CREATE TABLE public.ia_chat (
    id uuid NOT NULL,
    "SourceId" uuid NOT NULL,
    source_type integer NOT NULL,
    created_at timestamp with time zone NOT NULL,
    CONSTRAINT "PK_ia_chat" PRIMARY KEY (id),
    CONSTRAINT "FK_ia_chat_user_SourceId" FOREIGN KEY ("SourceId") REFERENCES public."user" (id)
);

CREATE TABLE public.identity_user_claim (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "UserId" uuid NOT NULL,
    "ClaimType" text,
    "ClaimValue" text,
    CONSTRAINT "PK_identity_user_claim" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_identity_user_claim_user_UserId" FOREIGN KEY ("UserId") REFERENCES public."user" (id)
);

CREATE TABLE public.identity_user_login (
    "LoginProvider" character varying(128) NOT NULL,
    "ProviderKey" character varying(128) NOT NULL,
    "ProviderDisplayName" text,
    "UserId" uuid NOT NULL,
    CONSTRAINT "PK_identity_user_login" PRIMARY KEY ("LoginProvider", "ProviderKey"),
    CONSTRAINT "FK_identity_user_login_user_UserId" FOREIGN KEY ("UserId") REFERENCES public."user" (id)
);

CREATE TABLE public.identity_user_role (
    user_id uuid NOT NULL,
    role_id uuid NOT NULL,
    CONSTRAINT "PK_identity_user_role" PRIMARY KEY (user_id, role_id),
    CONSTRAINT "FK_identity_user_role_role_role_id" FOREIGN KEY (role_id) REFERENCES public.role (id),
    CONSTRAINT "FK_identity_user_role_user_user_id" FOREIGN KEY (user_id) REFERENCES public."user" (id)
);

CREATE TABLE public.identity_user_token (
    "UserId" uuid NOT NULL,
    "LoginProvider" character varying(128) NOT NULL,
    "Name" character varying(128) NOT NULL,
    "Value" text,
    CONSTRAINT "PK_identity_user_token" PRIMARY KEY ("UserId", "LoginProvider", "Name"),
    CONSTRAINT "FK_identity_user_token_user_UserId" FOREIGN KEY ("UserId") REFERENCES public."user" (id)
);

CREATE TABLE public.manager (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    type integer NOT NULL,
    corporate_name character varying(100),
    CONSTRAINT "PK_manager" PRIMARY KEY (id),
    CONSTRAINT "FK_manager_user_user_id" FOREIGN KEY (user_id) REFERENCES public."user" (id)
);

CREATE TABLE public.sub_specialties (
    "Id" uuid NOT NULL,
    name character varying(100) NOT NULL,
    active boolean NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone,
    specialty_id uuid NOT NULL,
    CONSTRAINT "PK_sub_specialties" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_sub_specialties_specialties_specialty_id" FOREIGN KEY (specialty_id) REFERENCES public.specialties ("Id")
);

CREATE TABLE public.ia_message (
    id uuid NOT NULL,
    "IaChatId" uuid NOT NULL,
    sender_type integer NOT NULL,
    message text NOT NULL,
    content text NOT NULL,
    created_at timestamp with time zone NOT NULL,
    CONSTRAINT "PK_ia_message" PRIMARY KEY (id),
    CONSTRAINT "FK_ia_message_ia_chat_IaChatId" FOREIGN KEY ("IaChatId") REFERENCES public.ia_chat (id)
);

CREATE TABLE public.office (
    id uuid NOT NULL,
    owner_id uuid NOT NULL,
    name character varying(100) NOT NULL,
    cnpj character varying(14) NOT NULL DEFAULT '',
    phone character varying(15) NOT NULL DEFAULT '',
    whatsapp character varying(15) NOT NULL DEFAULT '',
    email character varying(100) NOT NULL DEFAULT '',
    site character varying(100) NOT NULL DEFAULT '',
    instagram character varying(100) NOT NULL DEFAULT '',
    logo character varying(100) NOT NULL DEFAULT '',
    CONSTRAINT "PK_office" PRIMARY KEY (id),
    CONSTRAINT "FK_office_manager_owner_id" FOREIGN KEY (owner_id) REFERENCES public.manager (id)
);

CREATE TABLE public.office_attendance (
    id uuid NOT NULL,
    office_id uuid NOT NULL,
    service_type_id uuid NOT NULL,
    title character varying(100) NOT NULL,
    description character varying(500),
    price bigint NOT NULL,
    active boolean NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone,
    CONSTRAINT "PK_office_attendance" PRIMARY KEY (id),
    CONSTRAINT "FK_office_attendance_office_office_id" FOREIGN KEY (office_id) REFERENCES public.office (id),
    CONSTRAINT "FK_office_attendance_service_type_service_type_id" FOREIGN KEY (service_type_id) REFERENCES public.service_type (id)
);

CREATE INDEX "IX_addresses_SourceId" ON public.addresses ("SourceId");

CREATE INDEX "IX_faq_SourceId" ON public.faq ("SourceId");

CREATE INDEX "IX_ia_chat_SourceId" ON public.ia_chat ("SourceId");

CREATE INDEX "IX_ia_message_IaChatId" ON public.ia_message ("IaChatId");

CREATE INDEX "IX_identity_role_claim_RoleId" ON public.identity_role_claim ("RoleId");

CREATE INDEX "IX_identity_user_claim_UserId" ON public.identity_user_claim ("UserId");

CREATE INDEX "IX_identity_user_login_UserId" ON public.identity_user_login ("UserId");

CREATE INDEX "IX_identity_user_role_role_id" ON public.identity_user_role (role_id);

CREATE UNIQUE INDEX "IX_manager_user_id" ON public.manager (user_id);

CREATE INDEX "IX_office_owner_id" ON public.office (owner_id);

CREATE INDEX "IX_office_attendance_office_id" ON public.office_attendance (office_id);

CREATE INDEX "IX_office_attendance_service_type_id" ON public.office_attendance (service_type_id);

CREATE UNIQUE INDEX "RoleNameIndex" ON public.role (normalized_name);

CREATE INDEX "IX_specialties_profession_id" ON public.specialties (profession_id);

CREATE INDEX "IX_sub_specialties_specialty_id" ON public.sub_specialties (specialty_id);

CREATE INDEX "EmailIndex" ON public."user" (normalized_email);

CREATE UNIQUE INDEX "UserNameIndex" ON public."user" (normalized_user_name);

INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
VALUES ('20250503195626_Initial', '8.0.15');

COMMIT;

START TRANSACTION;


INSERT INTO public.role ("id", "name", "normalized_name", "concurrency_stamp")
VALUES ('527a61cd-45be-4784-84e5-892ef13de3f3', 'Admin', 'ADMIN', '5416e36c-24ce-48b1-87d8-1bd20da05bae');

INSERT INTO public.role ("id", "name", "normalized_name", "concurrency_stamp")
VALUES ('710483d0-680c-4273-99d6-3c0be1940df8', 'Patient', 'PATIENT', '083e38e8-2ebf-4647-b29f-77c05275dba3');

INSERT INTO public.role ("id", "name", "normalized_name", "concurrency_stamp")
VALUES ('4fa64c52-e389-4bbc-be5f-8565081eb393', 'Employee', 'EMPLOYEE', 'befe65dc-ec5a-4400-a65a-e91f7827cf7d');

INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
VALUES ('20250503195730_InsertRoles', '8.0.15');

COMMIT;

START TRANSACTION;

ALTER TABLE public.addresses DROP CONSTRAINT "FK_addresses_user_SourceId";

ALTER TABLE public.addresses DROP CONSTRAINT "PK_addresses";

ALTER TABLE public.addresses RENAME TO address;

ALTER TABLE public.address RENAME COLUMN "SourceId" TO source_id;

ALTER INDEX public."IX_addresses_SourceId" RENAME TO "IX_address_source_id";

ALTER TABLE public.address ADD CONSTRAINT "PK_address" PRIMARY KEY (id);

CREATE TABLE public.office_address (
    id uuid NOT NULL,
    address_id uuid NOT NULL,
    office_id uuid NOT NULL,
    is_active boolean NOT NULL,
    CONSTRAINT "PK_office_address" PRIMARY KEY (id),
    CONSTRAINT "FK_office_address_address_address_id" FOREIGN KEY (address_id) REFERENCES public.address (id),
    CONSTRAINT "FK_office_address_office_office_id" FOREIGN KEY (office_id) REFERENCES public.office (id)
);

CREATE UNIQUE INDEX "IX_office_address_address_id_office_id" ON public.office_address (address_id, office_id);

CREATE INDEX "IX_office_address_office_id" ON public.office_address (office_id);

ALTER TABLE public.address ADD CONSTRAINT "FK_address_user_source_id" FOREIGN KEY (source_id) REFERENCES public."user" (id);

INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
VALUES ('20250503211858_CreateOfficeAddress', '8.0.15');

COMMIT;

START TRANSACTION;

CREATE TABLE public.professional (
    id uuid NOT NULL,
    "UserId" uuid NOT NULL,
    status integer NOT NULL,
    "OfficeId" uuid NOT NULL,
    "Active" boolean NOT NULL,
    cpf character varying(14) NOT NULL,
    website character varying(200),
    instagram character varying(200),
    linkedin character varying(200),
    doctoralia character varying(200),
    biography character varying(200),
    picture_url character varying(200),
    google_token character varying(200),
    google_refresh_token character varying(200),
    "PreRegister" text,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone,
    deleted_at timestamp with time zone,
    CONSTRAINT "PK_professional" PRIMARY KEY (id),
    CONSTRAINT "FK_professional_office_OfficeId" FOREIGN KEY ("OfficeId") REFERENCES public.office (id),
    CONSTRAINT "FK_professional_user_UserId" FOREIGN KEY ("UserId") REFERENCES public."user" (id)
);

CREATE TABLE public.offices_professionals (
    "Id" uuid NOT NULL,
    "OfficeId" uuid NOT NULL,
    "ProfessionalId" uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone,
    deleted_at timestamp with time zone,
    CONSTRAINT "PK_offices_professionals" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_offices_professionals_office_OfficeId" FOREIGN KEY ("OfficeId") REFERENCES public.office (id),
    CONSTRAINT "FK_offices_professionals_professional_ProfessionalId" FOREIGN KEY ("ProfessionalId") REFERENCES public.professional (id)
);

CREATE INDEX "IX_offices_professionals_OfficeId" ON public.offices_professionals ("OfficeId");

CREATE INDEX "IX_offices_professionals_ProfessionalId" ON public.offices_professionals ("ProfessionalId");

CREATE INDEX "IX_professional_OfficeId" ON public.professional ("OfficeId");

CREATE INDEX "IX_professional_UserId" ON public.professional ("UserId");

INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
VALUES ('20250505164905_AddProfessional', '8.0.15');

COMMIT;

START TRANSACTION;

CREATE TABLE public.patient (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    blood_type integer,
    biological_sex integer,
    picture_url text,
    google_token text,
    google_refresh_token text,
    pre_register boolean NOT NULL,
    gender integer,
    birth_date date,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone,
    removed_at timestamp with time zone,
    CONSTRAINT "PK_patient" PRIMARY KEY (id),
    CONSTRAINT "FK_patient_user_user_id" FOREIGN KEY (user_id) REFERENCES public."user" (id)
);

CREATE TABLE public.patient_lead (
    id uuid NOT NULL,
    name character varying(100) NOT NULL,
    phone character varying(20) NOT NULL,
    cpf character varying(11) NOT NULL,
    birth_date date,
    email character varying(100) NOT NULL,
    approved boolean NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone,
    removed_at timestamp with time zone,
    CONSTRAINT "PK_patient_lead" PRIMARY KEY (id)
);

CREATE UNIQUE INDEX "IX_patient_user_id" ON public.patient (user_id);

INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
VALUES ('20250506002023_AddPatientAndPatientLeadTables', '8.0.15');

COMMIT;

START TRANSACTION;

ALTER TABLE public.office_address ALTER COLUMN address_id DROP NOT NULL;

ALTER TABLE public.office_address ADD is_teleconsultation boolean NOT NULL DEFAULT FALSE;

INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
VALUES ('20250506170455_OfficeAddressRefactor', '8.0.15');

COMMIT;

START TRANSACTION;

ALTER TABLE public.faq DROP CONSTRAINT "FK_faq_user_SourceId";

DROP INDEX public."IX_faq_SourceId";

ALTER TABLE public.faq RENAME COLUMN "SourceId" TO source_id;

CREATE TABLE public.faq_page (
    id uuid NOT NULL,
    source_id uuid NOT NULL,
    custom_url character varying(100) NOT NULL,
    welcome_message character varying(500),
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone,
    CONSTRAINT "PK_faq_page" PRIMARY KEY (id)
);

CREATE UNIQUE INDEX "IX_faq_page_custom_url" ON public.faq_page (custom_url);

INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
VALUES ('20250506222804_AddFaqPage', '8.0.15');

COMMIT;

START TRANSACTION;

ALTER TABLE public.professional DROP CONSTRAINT "FK_professional_office_OfficeId";

ALTER TABLE public.professional DROP CONSTRAINT "FK_professional_user_UserId";

DROP INDEX public."IX_professional_OfficeId";

ALTER TABLE public.professional DROP COLUMN "OfficeId";

ALTER TABLE public.professional DROP COLUMN "PreRegister";

ALTER TABLE public.professional DROP COLUMN doctoralia;

ALTER TABLE public.professional DROP COLUMN google_refresh_token;

ALTER TABLE public.professional DROP COLUMN google_token;

ALTER TABLE public.professional DROP COLUMN linkedin;

ALTER TABLE public.professional RENAME COLUMN picture_url TO cnpj;

ALTER TABLE public.professional RENAME COLUMN "UserId" TO manager_id;

ALTER TABLE public.professional RENAME COLUMN "Active" TO is_registered;

ALTER INDEX public."IX_professional_UserId" RENAME TO "IX_professional_manager_id";

ALTER TABLE public.professional ALTER COLUMN cnpj TYPE character varying(14);

ALTER TABLE public.professional ADD CONSTRAINT "FK_professional_manager_manager_id" FOREIGN KEY (manager_id) REFERENCES public.manager (id);

INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
VALUES ('20250507214930_UpdateProfessionalAndOfficeProfessional', '8.0.15');

COMMIT;

START TRANSACTION;

DROP TABLE public.offices_professionals;

CREATE TABLE public.offices_professional (
    "Id" uuid NOT NULL,
    office_id uuid NOT NULL,
    professional_id uuid NOT NULL,
    is_public boolean NOT NULL,
    is_active boolean NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone,
    deleted_at timestamp with time zone,
    CONSTRAINT "PK_offices_professional" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_offices_professional_office_office_id" FOREIGN KEY (office_id) REFERENCES public.office (id),
    CONSTRAINT "FK_offices_professional_professional_professional_id" FOREIGN KEY (professional_id) REFERENCES public.professional (id)
);

CREATE INDEX "IX_offices_professional_office_id" ON public.offices_professional (office_id);

CREATE INDEX "IX_offices_professional_professional_id" ON public.offices_professional (professional_id);

INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
VALUES ('20250507223409_UpdateOfficeProfessional', '8.0.15');

COMMIT;

